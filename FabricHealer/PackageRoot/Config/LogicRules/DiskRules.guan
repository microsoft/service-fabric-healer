## Logic rules for Disk repair. Only file management is supported (file deletion). Note that all of these rules expect facts from an external source (FabricObserver or FHProxy).

## Applicable Named Arguments for Mitigate. Corresponding data is supplied by FabricObserver or FHProxy, renamed for brevity by FH.
## | Argument Name             | Definition                                                                                   |
## |---------------------------|----------------------------------------------------------------------------------------------|
## | NodeName                  | Name of the node                                                                             | 
## | NodeType                  | Type of node                                                                                 |  
## | ObserverName              | Name of Observer that generated the event (if data comes from the FabricObserver service)    |
## | ErrorCode                 | Supported Error Code emitted by caller (Disk codes are FO007-FO010, FO042, F0043)            | 
## | MetricName                | Name of the supplied metric                                                                  |   
## | MetricValue               | Corresponding value for supplied metric                                                      | 
## | OS                        | The name of the OS from which the data was collected (Linux or Windows)                      |
## | HealthState               | The HealthState of the target entity: Error or Warning                                       |
## | Source                    | The Source ID of the related SF Health Event                                                 |
## | Property                  | The Property of the related SF Health Event                                                  |

## Disk-related Metric Names.
## | Name                      |                                                                                    
## |---------------------------|
## | DiskSpacePercent          |                                         
## | DiskSpaceMB               |    
## | FolderSizeMB              |  

## Currently implemented external predicates for use in Disk repair rules.
## | Name                      | Definition                                                                               
## |---------------------------|---------------------------------------------------------------------------------------------------------------|
## | CheckFolderSize           | Returns true if supplied folder is equal to or larger than specified value.                                   |
## | DeleteFiles               | Deletes files in a specified directory (full path) with optional arguments.                                   |

## First, check if we are inside run interval. If so, then cut (!).
## This is commented out by default. Just uncomment and set the global run interval for disk level repairs to suit your needs.

## Mitigate :- CheckInsideRunInterval(02:00:00), !.

## DeleteFiles external predicate takes 1 required positional argument (position 0), which is the full path to the directory to be cleaned, and 4 optional named arguments.
## Optional (named, position 1 to n in argument list, first arg (0) is reserved for folder path) arguments for DeleteFiles: 
##		SortOrder - File sort order, Ascending or Descending. Defaults to Ascending (oldest to newest)).
##		MaxFilesToDelete - The maximum number of files to delete. If not specified (or 0) it will be interpreted to mean delete all files.
##		RecurseSubdirectories - Delete files in child folders of specified directory. Defaults to false if not specified.
##		SearchPattern - Delete only files with file names that match the specified search pattern. Default is "*" (all files).
##      MaxExecutionTime - The maximum time to allow for file deletion, after which the related Repair Job will be cancelled. Default is 00:10:00 if not specified.

## The CheckFolderSize external predicate takes a folder path string argument and either a MaxFolderSizeGB or MaxFolderSizeMB argument.
## Required positional arguments for CheckFolderSize external predicate:
##		First argument (0 position in argument list): The full path to the folder to be cleaned.

## Required named arguments (1 through n position in argument list) for CheckFolderSize external predicate:
##		MaxFolderSizezGB: max size of folder in gigabytes.
##      MaxFolderSizezMB: max size of folder in megabytes.

## If CheckFolderSize is true, then the next sub-goal will run, which in the rules below is the DeleteFiles external predicate.

## Single rule for different directories and size constraints, but where DeleteFiles takes the same optional arguments (and values). 
## Iterate over a list of folders with a system predicate, member (defined and implemented in Guan) and an internal predicate, 
## config (an internal predicate needs no backing impl, it only exists in this logic). This is useful if all folder targets share enough
## of the same argument values (less rules to write..).
Mitigate(MetricName=?MetricName) :- match(?MetricName, "FolderSizeMB"), GetRepairHistory(?repairCount, 08:00:00), 
	?repairCount < 8,
	member(config(?X,?Y), [config("D:\SvcFab\Log\Traces", 50), config("C:\fabric_observer_logs", 10), config("E:\temp", 10)]), 
	CheckFolderSize(?X, MaxFolderSizeMB=?Y),
	DeleteFiles(?X, SortOrder=Ascending, MaxFilesToDelete=10, RecurseSubdirectories=true, MaxExecutionTime=00:05:00).

## Single rule for one directory with all optional args supplied, including a search pattern for target file name matching ("SFBDMiniport_traces*"). 
## Please note: when specifying search pattern string, you must enclose it in quotes since the special characters used can also be interpreted as mathematical operators (like / or *) by Guan
## if they are not quoted strings. This is true for Guan across the board. Keep this in mind when you pass arguments in rules that contain special characters
## that are also mathematical operators (*,+,/,-,%, etc...).
Mitigate(MetricName=?MetricName) :- match(?MetricName, "DiskSpace"), GetRepairHistory(?repairCount, 08:00:00),
	?repairCount < 4,
	CheckFolderSize("E:\SvcFab\Log\Traces", MaxFolderSizeGB=20),
	DeleteFiles("E:\SvcFab\Log\Traces", SortOrder=Ascending, MaxFilesToDelete=10, RecurseSubdirectories=true, SearchPattern="SFBDMiniport_traces*", MaxExecutionTime=00:05:00).

## Folder size Warning, check ErrorCode from FO (you could also check MetricName -> MetricName=FolderSizeMB, but we already do that in several places). 
## See FOErrorWarningCodes.cs for list of codes and renaming function (GetMetricNameFromCode).
Mitigate(ErrorCode=FO043) :- GetRepairHistory(?repairCount, 08:00:00),
	?repairCount < 4,
	CheckFolderSize("E:\SvcFab\Log\Traces", MaxFolderSizeGB=50),
	DeleteFiles("E:\SvcFab\Log\Traces", SortOrder=Ascending, MaxFilesToDelete=25, RecurseSubdirectories=false, MaxExecutionTime=00:05:00).

## Constrain on folder size Error or Warning code.
Mitigate(ErrorCode=?ErrorCode) :- ?ErrorCode == "FO042" || ?ErrorCode == "FO043", GetRepairHistory(?repairCount, 08:00:00),
	?repairCount < 4,
	CheckFolderSize("C:\fabric_observer_logs", MaxFolderSizeMB=250),
	DeleteFiles("C:\fabric_observer_logs", SortOrder=Ascending, MaxFilesToDelete=5, RecurseSubdirectories=true, SearchPattern="*.dmp", MaxExecutionTime=00:05:00).

## Constrain on folder size Error or Warning code; use environment variable for/in supplied path. Note: Environment variable string must be enclosed in quotes.
Mitigate(ErrorCode=?ErrorCode) :- ?ErrorCode == "FO042" || ?ErrorCode == "FO043", GetRepairHistory(?repairCount, 08:00:00),
	?repairCount < 4,
	CheckFolderSize("%SOMEPATHVAR%", MaxFolderSizeGB=50),
	DeleteFiles("%SOMEPATHVAR%", SortOrder=Ascending, MaxFilesToDelete=25, RecurseSubdirectories=false, MaxExecutionTime=00:05:00).