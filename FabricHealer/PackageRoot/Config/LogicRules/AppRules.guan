## Logic rules for Service Fabric Application-level repairs. Note that all of these rules expect facts from an external source (FabricObserver or FHProxy).

## Applicable Named Arguments for Mitigate. Corresponding data is supplied by FabricObserver or FHProxy, renamed for brevity by FH.
## | Argument Name             | Definition                                                                                   |
## |---------------------------|----------------------------------------------------------------------------------------------|
## | AppName                   | Name of the SF application, format is "fabric:/SomeApp" (Quotes are required)                |
## | ServiceName               | Name of the SF service, format is "fabric:/SomeApp/SomeService" (Quotes are required)        |
## | ServiceKind               | The state kind of SF service: Stateful or Stateless                                          |
## | NodeName                  | Name of the node                                                                             | 
## | NodeType                  | Type of node                                                                                 |  
## | ObserverName              | Name of Observer that generated the event (if the data comes from FabricObserver service)    |
## | PartitionId               | Id of the partition                                                                          |
## | ReplicaOrInstanceId       | Id of the replica or instance                                                                |
## | ReplicaRole               | Role of replica: Primary or ActiveSecondary. Or None (e.g., Stateless replica)               |
## | ErrorCode                 | Supported Error Code emitted by caller (e.g. "FO002")                                        | 
## | MetricName                | Name of the metric (e.g., CpuPercent or MemoryMB, etc.)                                      |   
## | MetricValue               | Corresponding Metric Value (e.g. "85" indicating 85% CPU usage)                              | 
## | OS                        | The name of the OS from which the data was collected (Linux or Windows)                      |
## | ProcessName               | The name of the service process                                                              |
## | ProcessStartTime          | The time (UTC) the process was created on the machine                                        |
## | HealthState               | The HealthState of the target entity: Error or Warning                                       |
## | Source                    | The Source ID of the related SF Health Event                                                 |
## | Property                  | The Property of the related SF Health Event                                                  |

## Application-related Metric Names.
## | Name                      |                                                                                    
## |---------------------------|
## | ActiveTcpPorts            |                                         
## | CpuPercent                |    
## | EphemeralPorts            |
## | EphemeralPortsPercent     |
## | EndpointUnreachable*      |    
## | MemoryMB                  | 
## | MemoryPercent             | 
## | Handles                   | 
## | HandlesPercent            | 
## | Threads                   | 
## *Network-related repair is not supported today.

## Currently implemented external predicates for Application service level repair.
## | Name                      | Definition                                                                               
## |---------------------------|---------------------------------------------------------------------------------------------------------------|
## | RestartCodePackage        | Safely ends the code package process, which restarts all of the user service replicas hosted in that process. |
## | RestartReplica            | Restarts the offending stateful/stateless service replica without safety checks.                              |

## Note that restarting a code package is considered a more aggressive mitigation than restarting a single replica.
## However, RestartCodePackage is generally a safer operation. It just depends on the target service, which you will understand well (since you wrote the service). 
## If the target service is stateless, then restarting the replica (aka instance) should be fine without safety checks. 
## The RestartReplica predicate applies to both stateful and stateless service replicas since FH will do the right thing: 
## Remove the stateless instance or Restart the stateful replica.

## Repair Run Interval - Are we inside the run interval for an app repair? This is optional. It's up to you if you want to employ this type of constraint.
## This below rule means that if any of the repairs for any of the apps in this rule file has run within the past 30 minutes, cut (!), 
## which is a special operator that means, effectively, stop processing rules; do not backtrack.
## By having this as a top level rule, it means no subsequent rules in this file will run if we are inside the specified run interval.
## This is commented out by default. Just uncomment and set the global run interval for app level repairs to suit your needs.

## Mitigate :- CheckInsideRunInterval(00:30:00), !.

## Repair Lifetime Management - Specify that a repair can only run until some end date. This gives the dev team time to identify and fix the bug in user code that is causing the problem.
## Meanwhile, FabricHealer will keep the offending service green. Remember: Auto-mitigation is not a fix, it's a stop gap. Fix those bugs!
## time() and DateTime() are Guan functions (system functions) that can be used in combination for exactly this purpose.
## time() with no arguments returns DateTime.UtcNow. DateTime will return a DateTime object that represents the supplied datetime string. 
## *Note*:  you must wrap the date string in quotes to make it explicit to Guan that the arg is a string as it contains mathematical operators (in this case a /).
## The rule below reads: If any of the specified (set in Mitigate) app's service processes have put it into Warning due to CPU over-consumption and today's date is later than the supplied end date, emit a message, stop processing rules (!).
## You can use LogInfo, LogWarning or LogError predicates to generate a log event that will create a local text log entry, an ETW event, and an SF health report.

Mitigate(AppName="fabric:/CpuStress", MetricName="CpuPercent") :- time() > DateTime("8/15/2023"),
	LogInfo("Exceeded specified end date for repair of fabric:/CpuStress CpuPercent usage violations. Target end date: {0}. Current date (Utc): {1}", DateTime("8/15/2023"), time()), !.

## Alternatively, you could enforce repair end dates inline (as a subrule) to any rule, e.g.,

Mitigate(AppName="fabric:/PortEater42", MetricName="EphemeralPorts", MetricValue=?MetricValue) :- time() < DateTime("8/15/2023"),
	?MetricValue >= 8500,
	TimeScopedRestartCodePackage(4, 01:00:00).

## Logic rules for multiple metrics and targets using facts provided by either FabricObserver SF service or FHProxy (library hosted in a user service).

## CPU 

## CPU - Percent In Use - Constrained on AppName and number of times FabricObserver/FHProxy generates an Error/Warning Health report for CpuPercent metric within a specified timespan.
## This reads: Try to mitigate an SF Application in Error or Warning named fabric:/CpuStress where one of its services is consuming too much CPU (as a percentage of total CPU) 
## and where at least 3 health events identifying this problem were produced in the last 15 minutes. This is useful to ensure you don't mitigate a transient (short-lived)
## problem as they will self-correct.

## How long has it been in unhealthy state and how long has it not been in unhealthy state (healthy state).

## CPU - Percent In Use - Constrained on ServiceName.
Mitigate(ServiceName="fabric:/CpuStress/CpuStressor", MetricName="CpuPercent", MetricValue=?MetricValue) :- ?MetricValue >= 85,
	GetHealthEventHistory(?HealthEventCount, 00:30:00),
	?HealthEventCount >= 3,
	TimeScopedRestartCodePackage(1, 00:15:00).

## CPU - Percent In Use - Constrained on AppName.
Mitigate(AppName="fabric:/MyApp42", MetricName="CpuPercent", MetricValue=?MetricValue) :- ?MetricValue >= 80, 
	GetHealthEventHistory(?HealthEventCount, 00:15:00),
	?HealthEventCount >= 3,
	TimeScopedRestartCodePackage(4, 01:00:00).

## CPU - Percent In Use - Specific application, any of its service processes.
Mitigate(AppName="fabric:/MyApp", MetricName="CpuPercent") :- TimeScopedRestartCodePackage(5, 01:00:00).

## CPU - Percent In Use - Any application's service that exceeds 90% cpu usage, repair up to 5 times in a one hour window.
Mitigate(MetricName="CpuPercent", MetricValue=?MetricValue) :- ?MetricValue >= 90, TimeScopedRestartCodePackage(5, 01:00:00).

## Handles

## This is also an example of how to use the Guan system predicate, match (and notmatch). It takes two args, the first is the source, the second is a regular expression, 
## in this case, just a string of characters (no special regex characters). 
## In practice, for this scenario, you would just pass the target app name string into Mitigate, Mitigate(AppName="fabric:/ClusterObserver", ...), for example. 
## Use of the match function here is just an example of how to use it. Note that in Prolog, this type of substring matching capability could be expressed as an internal predicate 
## in a much more complex format, in terms of human readability: substring(X,S) :-append(_,T,S), append(X,_,T), X \= []. 
## This is because in Prolog a string is a list of characters. In Guan, a string is just a built-in .NET object, System.String. 
## This is one of the great things about Guan: It's .NET all the way down.

## Constrained on AppName (match string in subrule), MetricName (Handles). 5 repairs within 1 hour window.
Mitigate(AppName=?AppName, MetricName="Handles") :- match(?AppName, "ClusterObserver"), 
	TimeScopedRestartCodePackage(5, 01:00:00).

## Constrained on AppName, MetricName (Handles). 5 repairs within 1 hour window.
Mitigate(AppName="fabric:/MyApp", MetricName="Handles") :- TimeScopedRestartCodePackage(5, 01:00:00).

## Memory

## Memory - Percent In Use for Any SF Service Process belonging to the specified SF Application. 3 repairs within 10 minute window.
Mitigate(AppName="fabric:/MemoryStress", MetricName="MemoryPercent", MetricValue=?MetricValue) :- ?MetricValue >= 30, 
	TimeScopedRestartCodePackage(3, 00:10:00).

## Memory - Megabytes In Use for Any SF Service Process belonging to the specified SF Applications. 5 repairs within 5 hour window.
Mitigate(AppName="fabric:/ContainerFoo", MetricName="MemoryMB") :- TimeScopedRestartCodePackage(5, 05:00:00).
Mitigate(AppName="fabric:/ContainerFoo2", MetricName="MemoryMB") :- TimeScopedRestartCodePackage(5, 05:00:00).

## Note the constraint on HealthState in the head of the rule below, which only applies to one service, fabric:/Voting/VotingData, in this example (just change the fabric Uri for your target). 
## This is important when you have both Warning and Error thresholds specified for some service for some metric in FabricObserver. You would do that 
## to enable FabricObserver to dump the offending service process in the Error case, for example. Then, have FabricHealer restart the code package.
## This is important to call out as you do not want to have a repair task already in flight for the Warning case when what you
## really want to do is conduct restart repair only in the Error case (and after FO has dumped the process already, which will always be the case).
Mitigate(ServiceName="fabric:/Voting/VotingData", MetricName="MemoryMB", HealthState="Error") :- TimeScopedRestartCodePackage(5, 05:00:00).

## Any app service that exceeds 2GB private workingset, restart code package if warning data is provided at least 3 times within 15 minute window. 1 repair per hour.
Mitigate(MetricName="MemoryMB", MetricValue=?MetricValue) :- ?MetricValue >= 2048,
	GetHealthEventHistory(?HealthEventCount, TimeRange=00:15:00),
	?HealthEventCount >= 3,
	TimeScopedRestartCodePackage(1, 01:00:00).

## Ports 

## Local Active TCP Ports.
## Any app service. 5 repairs within 5 hour window. This means if FO warns on Active Ports, then heal. 
Mitigate(MetricName="ActiveTcpPorts") :- TimeScopedRestartCodePackage(5, 05:00:00).

## Local Ports in Dynamic Range (aka Ephemeral Ports)
## Percentage in use or Total Ephemeral ports - Any app service. 5 repairs within 5 hour window. This means if FO or FHProxy supplies repair facts related to Ephemeral ports,
## then restart the offending service by simulating process failure (RestartCodePackage). This will free all TCP ports held by the process.
Mitigate(MetricName="EphemeralPorts", HealthState="Error") :- TimeScopedRestartCodePackage(15, 05:00:00).

## Total Ephemeral Ports - Specific Application: any of its services, constrained on number of local ephemeral ports open. 
## 5 repairs within 5 hour window.
Mitigate(AppName="fabric:/MyApp42", MetricName="EphemeralPorts", MetricValue=?MetricValue) :- ?MetricValue > 7000, TimeScopedRestartCodePackage(5, 05:00:00).

## Percentage Ephemeral Ports - Specific Application: any of its services, constrained on ephemeral ports percent (of total) usage. 
## 5 repairs within 5 hour window.
Mitigate(AppName="fabric:/MyApp42", MetricName="EphemeralPortsPercent", MetricValue=?MetricValue) :- ?MetricValue > 20, TimeScopedRestartCodePackage(5, 05:00:00).

## Threads

## Threads - Ignore specific application (FabricObserver, just for example - it's fine to target FO for repairs, generally), constrained on number of threads in use by the offending service process.
## 5 repairs within 5 hour window.
Mitigate(AppName=?AppName, MetricName="Threads", MetricValue=?MetricValue) :- ?AppName != "fabric:/FabricObserver", ?MetricValue >= 400, TimeScopedRestartCodePackage(5, 05:00:00).

## Threads - Any app service. 5 repairs within 5 hour window. This means if FO warns on Thread count, then heal. There are no conditional checks (on MetricValue) to take place.
Mitigate(MetricName="Threads") :- TimeScopedRestartCodePackage(5, 05:00:00).

## Generic rule for restarting any service in Warning or Error. This means any service that is in Error or Warning state and
## also specified in the serialized TelemetryData instance that forms the Description of the related Service level Health Event will be restarted.
##Mitigate() :- TimeScopedRestartReplica(10, 05:00:00).

## Internal Predicates

## TimeScopedRestartCodePackage/TimeScopedRestartReplica are internal predicates to check for the number of times a repair has run to completion within a supplied time window. 
## If Completed Repair count is less then supplied value, then run RestartCodePackage/RestartReplica mitigation. If not, emit a message so developer has event data that describes why
## the repair was not attempted at this time. LogInfo/LogWarning/LogError always succeeds.

TimeScopedRestartCodePackage(?count, ?time) :- GetRepairHistory(?repairCount, ?time), ?repairCount >= ?count,
	LogInfo("Exhausted specified run count, {0}, within specified max repair time window, {1}. Will not attempt RestartCodePackage repair at this time.", ?count, ?time).

TimeScopedRestartReplica(?count, ?time) :- GetRepairHistory(?repairCount, ?time), ?repairCount >= ?count,
	LogInfo("Exhausted specified run count, {0}, within specified max repair time window, {1}. Will not attempt RestartReplica repair at this time.", ?count, ?time).

## If we get here, it means the number of repairs for a target has not exceeded the maximum number specified to run within a time window.
## Note you can add up to three optional arguments to RestartCodePackage/RestartReplica. The way FabricHealer implements optional arguments for Guan predicates provides some flexibility:
## You can supply optional args as named (as below) or just as values. However, do note that in the predicates below if you want to include only one of the optional args and it is
## a timespan type, you must name it and the name must be what you see below for each argument. You can of course not provide any arguments and the default values will be used
## by the repair executor (FabricHealer).

## Restart all replicas hosted in the process. If you do not specify a value for MaxExecutionTime argument, the default is 60 minutes.
TimeScopedRestartCodePackage :- RestartCodePackage(DoHealthChecks=false, MaxWaitTimeForHealthStateOk=00:01:00, MaxExecutionTime=00:30:00).

## Restart individual replica hosted in the process. If you do not specify a value for MaxExecutionTime argument, the default is 60 minutes.
TimeScopedRestartReplica :- RestartReplica(DoHealthChecks=false, MaxWaitTimeForHealthStateOk=00:01:00, MaxExecutionTime=00:15:00).


## This is an example of how to call a custom repair from a plugin. In this rule, "SampleRepair" is the repair rule loaded from SampleHealerPlugin project.
##Mitigate(HealthState="Warning") :- SampleRepair("repair rule loaded from plugin").
