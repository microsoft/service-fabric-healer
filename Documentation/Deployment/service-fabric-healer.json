{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "clusterName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The Service Fabric cluster resource name from the Azure resource group. Example: servicefabriccluster123"
      }
    },
    "applicationTypeVersionFabricHealer": {
      "type": "string",
      "defaultValue": "1.2.11",
      "metadata": {
        "description": "Provide the app version number of FabricHealer. This must be identical to the version specified in the sfpkg."
      }
    },
    "packageUrlFabricHealer": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "This has to be a public accessible URL for the sfpkg file which contains the FabricHealer app package. Example: https://github.com/microsoft/service-fabric-healer/releases/download/48361039/Microsoft.ServiceFabricApps.FabricHealer.Windows.SelfContained.1.1.1.sfpkg"
      }
    }
  },
  "variables": {
    "applicationTypeNameFabricHealer": "FabricHealerType",
    "applicationNameFabricHealer": "FabricHealer",
    "serviceNameFabricHealer": "[concat(variables('applicationNameFabricHealer'), '~FabricHealerService')]",
    "serviceTypeNameFabricHealer": "FabricHealerType",
    "sfrpApiVersion": "2021-06-01"
  },
  "resources": [
    {
      "apiVersion": "[variables('sfrpApiVersion')]",
      "type": "Microsoft.ServiceFabric/clusters/applicationTypes",
      "name": "[concat(parameters('clusterName'), '/', variables('applicationTypeNameFabricHealer'))]",
      "location": "[resourceGroup().location]",
      "properties": {
        "provisioningState": "Default"
      }
    },
    {
      "apiVersion": "[variables('sfrpApiVersion')]",
      "type": "Microsoft.ServiceFabric/clusters/applicationTypes/versions",
      "name": "[concat(parameters('clusterName'), '/', variables('applicationTypeNameFabricHealer'), '/', parameters('applicationTypeVersionFabricHealer'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.ServiceFabric/clusters/', parameters('clusterName'), '/applicationTypes/', variables('applicationTypeNameFabricHealer'))]"
      ],
      "properties": {
        "provisioningState": "Default",
        "appPackageUrl": "[parameters('packageUrlFabricHealer')]"
      }
    },
    {
      "apiVersion": "[variables('sfrpApiVersion')]",
      "type": "Microsoft.ServiceFabric/clusters/applications",
      "name": "[concat(parameters('clusterName'), '/', variables('applicationNameFabricHealer'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.ServiceFabric/clusters/', parameters('clusterName'), '/applicationTypes/', variables('applicationTypeNameFabricHealer'), '/versions/', parameters('applicationTypeVersionFabricHealer'))]"
      ],
      "properties": {
        "provisioningState": "Default",
        "typeName": "[variables('applicationTypeNameFabricHealer')]",
        "typeVersion": "[parameters('applicationTypeVersionFabricHealer')]",
        "parameters": {
          "HealthCheckIntervalInSeconds": "15"
        },
        "upgradePolicy": {
          "upgradeReplicaSetCheckTimeout": "01:00:00.0",
          "forceRestart": "false",
          "rollingUpgradeMonitoringPolicy": {
            "healthCheckWaitDuration": "00:02:00.0",
            "healthCheckStableDuration": "00:05:00.0",
            "healthCheckRetryTimeout": "00:10:00.0",
            "upgradeTimeout": "01:00:00.0",
            "upgradeDomainTimeout": "00:20:00.0"
          },
          "applicationHealthPolicy": {
            "considerWarningAsError": "false",
            "maxPercentUnhealthyDeployedApplications": "50",
            "defaultServiceTypeHealthPolicy": {
              "maxPercentUnhealthyServices": "50",
              "maxPercentUnhealthyPartitionsPerService": "50",
              "maxPercentUnhealthyReplicasPerPartition": "50"
            }
          }
        }
      }
    },
    {
      "apiVersion": "[variables('sfrpApiVersion')]",
      "type": "Microsoft.ServiceFabric/clusters/applications/services",
      "name": "[concat(parameters('clusterName'), '/', variables('applicationNameFabricHealer'), '/', variables('serviceNameFabricHealer'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.ServiceFabric/clusters/', parameters('clusterName'), '/applications/', variables('applicationNameFabricHealer'))]"
      ],
      "properties": {
        "provisioningState": "Default",
        "serviceKind": "Stateless",
        "serviceTypeName": "[variables('serviceTypeNameFabricHealer')]",
        "instanceCount": "-1",
        "partitionDescription": {
          "partitionScheme": "Singleton"
        },
        "correlationScheme": [],
        "serviceLoadMetrics": [],
        "servicePlacementPolicies": []
      }
    }
  ]
}
